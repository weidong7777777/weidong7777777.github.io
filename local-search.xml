<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对某靶场主机的一次渗透</title>
    <link href="/2020/05/16/%E5%AF%B9%E6%9F%90%E9%9D%B6%E5%9C%BA%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/"/>
    <url>/2020/05/16/%E5%AF%B9%E6%9F%90%E9%9D%B6%E5%9C%BA%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><ul><li>windows7 虚拟机</li><li>kali 虚拟机</li><li>攻击目标网段 192.168.188.0/24</li></ul><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><ul><li><p>使用nmap进行主机发现</p><pre><code class="shell">nmap 192.168.188.0/24</code></pre></li></ul><p><img src="https://s1.ax1x.com/2020/05/16/Y6zF6P.png" srcset="/img/loading.gif" alt="">       </p><ul><li>发现这个 192.168.188.150 开放的端口最对 访问试试 发现网站</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcS4PJ.png" srcset="/img/loading.gif" alt=""></p><ul><li>因为使用后台扫描工具并没有发现后台 我又尝试目录爆破 发现admin.php 目录</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcpFZ8.png" srcset="/img/loading.gif" alt=""></p><ul><li>访问 admin.php 发现后台登录页面</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcpWOP.png" srcset="/img/loading.gif" alt=""></p><h1 id="三、尝试sql注入"><a href="#三、尝试sql注入" class="headerlink" title="三、尝试sql注入"></a>三、尝试sql注入</h1><ul><li>在页面查找注入点 发现新闻动态页面可能存在注入 使用语句验证</li></ul><pre><code class="shell">http://192.168.188.150/index.php?s=/news/6&#39;</code></pre><ul><li>看返回报错页面 需要用 ）进行闭合 并用 – 将后边语句注释</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcPuQA.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://s1.ax1x.com/2020/05/16/YcPgSJ.png" srcset="/img/loading.gif" alt=""></p><ul><li>1=1时正常 1=2时报错 存在注入 使用 order by 查询有多少列</li><li>当order by 7时回显正常  order by 8回显不正常时 发现共7列</li><li>使用联合查询 union select  查询回显位</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/Yci4js.png" srcset="/img/loading.gif" alt=""></p><ul><li>在 2 ， 7 位置输入查询语句 </li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcFQ58.png" srcset="/img/loading.gif" alt=""></p><ul><li>爆出表名 继续爆列名 </li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcFxJS.png" srcset="/img/loading.gif" alt=""></p><ul><li>继续爆出字段</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YckCss.png" srcset="/img/loading.gif" alt=""></p><ul><li>经过base64解码 得到管理员密码 登录后台 </li><li>sqlmap也尝试了直接跑 结果跑不出来 你们可以自己去尝试</li></ul><h1 id="四、文件上传"><a href="#四、文件上传" class="headerlink" title="四、文件上传"></a>四、文件上传</h1><ul><li>拿到后台后寻找上传点 在 网站设置 –&gt;首页大图发现可以上传</li><li>按照提示 只能上传png文件 上传shell 使用bp改包</li><li>这次上传我用的是一个gif文件头的一句话 在MIME类型改成 image/gif 并在上传位置使用00截断</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcAuh8.png" srcset="/img/loading.gif" alt=""></p><ul><li>找到上传位置 使用蚁剑连接</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcAyH1.png" srcset="/img/loading.gif" alt=""></p><h1 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h1><ul><li>因为这是一个win7 32位的系统 在这里我使用CVE-2018-8120 进行提权</li><li>在上一步已经可以连接并上传文件 直接将CVE的exe进行上传 为了方便执行我改为a.exe</li><li>打开终端 执行exe 添加用户 并将用户添加到管理员组</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcErRS.png" srcset="/img/loading.gif" alt=""></p><ul><li>因为我是在本地用虚拟机搭的 所以我直接登录</li></ul><p><img src="https://s1.ax1x.com/2020/05/16/YcEfI0.png" srcset="/img/loading.gif" alt=""></p><ul><li><p>进入后查看管理用户桌面 成功提权</p></li><li><p><img src="https://s1.ax1x.com/2020/05/16/YcExJK.png" srcset="/img/loading.gif" alt=""></p></li><li><p>需要注意的是 并不是添加到管理员组就可以进行远程桌面连接 必须在Remote Desktop Users 组里</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS-labs(11-20)</title>
    <link href="/2020/03/25/XSS-lab/"/>
    <url>/2020/03/25/XSS-lab/</url>
    
    <content type="html"><![CDATA[<h1 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h1><p><img src="https://s1.ax1x.com/2020/03/25/8Xzx4f.png" srcset="/img/loading.gif" alt=""></p><ul><li>拿到题先从url地址栏keyword传入参数试试</li><li>然后查看源代码 发现有个ref 想到了用referer请求头传参将语句插入 使用bp抓包</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8jVDlq.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://s1.ax1x.com/2020/03/25/8jVWtJ.png" srcset="/img/loading.gif" alt=""></p><pre><code class="payload">test&quot; type=&quot;button&quot; onclick=&quot;javascript:alert(1)&quot;</code></pre><h1 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h1><p><img src="https://s1.ax1x.com/2020/03/25/8jelsP.png" srcset="/img/loading.gif" alt=""></p><ul><li>根据上一题的思路 直接查看网页源码 发现了 ua 就想到了用ua请求头传参将语句插入</li><li>启动bp</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8jm6nP.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://s1.ax1x.com/2020/03/25/8jnCB6.png" srcset="/img/loading.gif" alt=""></p><pre><code class="payload">test&quot; type=&quot;button&quot; onclick=&quot;javascript:alert(1)&quot;</code></pre><h1 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h1><p><img src="https://s1.ax1x.com/2020/03/25/8jnsC4.png" srcset="/img/loading.gif" alt=""></p><ul><li>直接查看网页源码 发现cook 使用cookie注入</li><li>启动bp</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8jQEZt.png" srcset="/img/loading.gif" alt="p"></p><pre><code class="payload">test&quot; type=&quot;button&quot; onclick=&quot;javascript:alert(1)&quot;</code></pre><h1 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h1><p>emmmm 这关因为环境问题 没有通关</p><h1 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h1><ul><li>这个题需要自己改一下js 因为默认的为google会被墙</li><li><a href="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js</a></li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8j1GCT.png" srcset="/img/loading.gif" alt=""></p><ul><li>用之前的思路发现没有用处 查看网页源代码发现了angularjs的ng-include直接在包含的页面里 触发不了，用了img标签</li><li>调用第一关代码。需要单引号包裹，否则变成注释</li><li>ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。ng-include 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下</li></ul><pre><code class="payload">/level15.php?src=&#39;level1.php?name=test&lt;img src=1 onerror=alert(1)&gt;&#39;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8j3TT1.png" srcset="/img/loading.gif" alt=""></p><h1 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h1><p><img src="https://s1.ax1x.com/2020/03/25/8j8cBd.png" srcset="/img/loading.gif" alt=""></p><ul><li>直接尝试用一些语句插入 发现过滤了script 等所以想到用img标签的语句</li><li>构造语句插入发现空格也被转义 于是用%0a %0d分隔符代替空格</li></ul><pre><code class="payload">&lt;img%0dsrc=x%0donerror=alert(1)&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8jGJ8f.png" srcset="/img/loading.gif" alt=""></p><h1 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h1><p><img src="https://s1.ax1x.com/2020/03/25/8jGoPx.png" srcset="/img/loading.gif" alt=""></p><ul><li>输入点在url，寻找输出点</li><li>过滤了尖括号 双引号 用on事件触发</li></ul><pre><code class="payload"> onmouseover=alert(1)</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8jYwhq.png" srcset="/img/loading.gif" alt=""></p><h1 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h1><ul><li>操作同上关一样</li></ul><h1 id="level19-amp-20"><a href="#level19-amp-20" class="headerlink" title="level19&amp;20"></a>level19&amp;20</h1><ul><li>这两道题涉及到flashXss 以及反编译 触及我知识盲区没能解出来</li></ul>]]></content>
    
    
    <categories>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS-labs(1-10)</title>
    <link href="/2020/03/25/XSS-labs/"/>
    <url>/2020/03/25/XSS-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8X1q6H.png" srcset="/img/loading.gif" alt=""></p><ul><li>首先使用最简单的语句在url框中插入，直接通过</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8XJIDH.png" srcset="/img/loading.gif" alt=""></p><pre><code class="payload">&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XYuZ9.png" srcset="/img/loading.gif" alt=""></p><ul><li>XSS嘛 见框就插 提交后发现它把&lt;&gt;都给过滤了 所以就想到了用on事件触发</li><li>插入onclick=alert(1)点击输入框发现并没有触发 然后查看源码需要将value的“闭合</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8XNd8P.png" srcset="/img/loading.gif" alt=""></p><pre><code class="paylaod">&quot;onclick=&quot;alert(1)</code></pre><h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XUYsU.png" srcset="/img/loading.gif" alt=""></p><ul><li>跟着上一题的思路 直接插入onclick点击触发事件 没有触发</li><li>查看源代码 发现这次value是用‘闭合的 所以构造payload</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8XawnS.png" srcset="/img/loading.gif" alt=""></p><pre><code class="payload">&#39;onclick=&#39;alert(1)</code></pre><h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XdmNj.png" srcset="/img/loading.gif" alt=""></p><ul><li>这道题好像跟第二关没什么区别 直接带入payload就可以通过</li></ul><p><img src="https://s1.ax1x.com/2020/03/25/8Xw3RI.png" srcset="/img/loading.gif" alt=""></p><pre><code class="payload">&quot;onclick=&quot;alert(1)</code></pre><h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XBSN4.png" srcset="/img/loading.gif" alt=""></p><ul><li>尝试用上一关方法插入 发现点击并没有触发 查看源代码发现他把on给过滤了变成o_n</li><li>尝试大小写输入跟双写输入发现都没有效果 使用其它语句发现尖括号没有被过滤但是&lt;script被过滤了</li><li>第二次引用keyword时没有转义，使用”&gt;可以闭合input标签 所以使用不含 on 和 &lt;script的弹窗方式</li></ul><pre><code class="payload">&quot;&gt; &lt;a href=&#39;javascript:alert(1)&#39;&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8Xrc9J.png" srcset="/img/loading.gif" alt=""></p><h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XsQ29.png" srcset="/img/loading.gif" alt=""></p><ul><li>使用上一关的方法发现没有弹出可以点的链接</li><li>查看源代码发现它把href过滤成了hr_ef 尝试大写绕过</li></ul><pre><code class="payload">&quot;&gt; &lt;a hRef=&#39;javascript:alert(1)&#39;&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8XsHaT.png" srcset="/img/loading.gif" alt=""></p><h1 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8Xszs1.png" srcset="/img/loading.gif" alt=""></p><ul><li>使用一些语句插入发现大部分被过滤 src script href </li><li>第二处引用keyword没有编码，可以闭合input标签后，重写关键字绕过过滤</li></ul><pre><code class="payload">&quot;&gt;&lt;scscriptript&gt;alert(1)&lt;scscriptript&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8XcAKA.png" srcset="/img/loading.gif" alt=""></p><h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XcgIK.png" srcset="/img/loading.gif" alt=""></p><ul><li><p>插入一些基础语句发现 在过滤前将keyword转化为小写，并且过滤了script、on、src、data、href、双引号</p></li><li><p>查看源代码发现输入会在href中体现所以使用伪协议构造由于过滤了script可以考虑编码绕过这里我们用html实体编码替换语句中的t</p><p><img src="https://s1.ax1x.com/2020/03/25/8X2wu9.png" srcset="/img/loading.gif" alt=""></p></li></ul><pre><code class="payload">javascrip&amp;#116;:alert(1)</code></pre><h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8X2IEt.png" srcset="/img/loading.gif" alt=""></p><ul><li>使用上一关的payload 添加后发现它说我的链接不合法</li><li>查看源码 发现它必须输入http://  的链接</li></ul><pre><code class="payload">javascrip&amp;#116;:alert(1)//http://</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8Xf0Bj.png" srcset="/img/loading.gif" alt=""></p><h1 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h1><p><img src="https://s1.ax1x.com/2020/03/25/8XokYn.png" srcset="/img/loading.gif" alt=""></p><ul><li>拿到这个题发现没有框 在url地址栏中插入 传入一些参数后发现页面没有变化 查看网页源代码 发现有三个隐藏的参数 t_link t_history t_sort</li><li>构造传参 keyword=test&amp;t_link=test1&amp;t_history=test2&amp;t_sort=test3</li><li>传入后发现t_sort的值被写入</li><li>所以我们可以使用双引号仅闭合input标签中对value，然后添加属性是input显现在页面中</li><li>在页面中添加一个按钮 触发onclick事件 构造</li></ul><pre><code class="payload">&amp;t_sort=test&quot; type=&quot;button&quot; onclick=&quot;javascript:alert(1)&quot;</code></pre><p><img src="https://s1.ax1x.com/2020/03/25/8XbXKx.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS跨站脚本</title>
    <link href="/2020/03/21/XSS%E8%B7%A8%E7%AB%99%E6%94%BB%E5%87%BB/"/>
    <url>/2020/03/21/XSS%E8%B7%A8%E7%AB%99%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS的原理"><a href="#XSS的原理" class="headerlink" title="XSS的原理"></a>XSS的原理</h1><ul><li>XSS攻击是在网页中嵌入客户端恶意脚本代码这些恶意代码一般是JavaScript语言编写例如</li></ul><pre><code class="php">&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;img src=x onerror=alert(/xss/)&gt;</code></pre><ul><li>XSS的类型<ul><li>反射型XSS<ul><li>又称为非持久性XSS 攻击方式是xss中最常见的漏洞</li></ul></li><li>攻击方式<ul><li>电子邮件 钓鱼网站</li></ul></li><li>储存型XSS<ul><li>又称为持久型xss 攻击脚本将被永久的存放在服务器的数据库或文件中，具有很高的隐藏性</li></ul></li><li>攻击方式<ul><li>论坛 博客 留言板</li></ul></li><li>DOM型XSS<ul><li>是一种特殊的反射型XSS基于DOM文档对象模型的一种漏洞</li><li>恶意链接</li></ul></li></ul></li><li>检测XSS<ul><li>手工检测<ul><li>可得知输出位置<br>输入一些敏感字符 例如“&lt;,&gt;,”,’,()”等 再提交请求后查看HTML源代码看这些输入的字符是否被转义</li><li>无法得知输出位置<br>输入”/&gt;xss test 测试</li></ul></li><li>全自动检测<ul><li>APPSACN AWVS burpsuite 等工具</li><li>专业的XSS扫描工具：XSSER XSSF</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入之绕过</title>
    <link href="/2020/03/18/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%BB%95%E8%BF%87/"/>
    <url>/2020/03/18/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="waf相关介绍"><a href="#waf相关介绍" class="headerlink" title="waf相关介绍"></a>waf相关介绍</h1><ul><li>waf（Web Application Firewall）类型有哪些<ul><li>软件型waf</li><li>硬件型waf</li><li>云waf<ul><li>​    反向代理模式工作 通过配置NS记录或者CNAME记录</li></ul></li><li>网站系统内置waf</li></ul></li><li>waf的功能<ul><li>审计</li><li>访问控制</li><li>架构安全的网络设计</li><li>web加固</li></ul></li><li>waf怎么识别扫描器<ul><li>扫描器指纹（head字段/请求的参数值）</li><li>单IP|cookie 某一个时间段发出多少次请求判断</li><li>隐藏链接标签</li></ul></li><li>怎么判断有无waf<ul><li>使用sqlmap       命令–identigy-waf</li><li>手工判断 构造payload 表现为页面无法访问 响应码异常</li></ul></li></ul><h1 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h1><ul><li>黑名单过滤可能会过滤例如空格、/、\、‘、adn、or、union、select、sleep（）、“、limit等字符</li><li>利用自己构造的payload sqlmap tamper</li></ul><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li>双写绕过 <ul><li>例如过滤了and 我们可以用anandd 替代 </li><li>order 可用 ordorderer</li><li>select 可用 selselectct</li></ul></li><li>大小写绕过</li><li>编码绕过<ul><li>base64 ascii 宽字符 url编码 uncode 例如 空格可用%0a</li></ul></li><li>替换关键字<ul><li>union=UNIunionon </li><li>select=SELselectCT</li></ul></li><li>注释绕过<ul><li>空格 /**/ （）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWD比赛经验及命令防御篇</title>
    <link href="/2020/03/16/AWD%E6%AF%94%E8%B5%9B%E7%BB%8F%E9%AA%8C%E5%8F%8A%E5%91%BD%E4%BB%A4%E9%98%B2%E5%BE%A1%E7%AF%87/"/>
    <url>/2020/03/16/AWD%E6%AF%94%E8%B5%9B%E7%BB%8F%E9%AA%8C%E5%8F%8A%E5%91%BD%E4%BB%A4%E9%98%B2%E5%BE%A1%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/16/8JTQSg.jpg" srcset="/img/loading.gif" alt="8JTQSg.jpg"></p><h1 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h1><ul><li>win10</li><li>kali</li><li>winSCP</li><li>一些渗透常用工具及脚本</li></ul><h1 id="比赛开始"><a href="#比赛开始" class="headerlink" title="比赛开始"></a>比赛开始</h1><h2 id="拿到自己的服务器"><a href="#拿到自己的服务器" class="headerlink" title="拿到自己的服务器"></a>拿到自己的服务器</h2><ul><li><p>备份网站文件</p><pre><code class="shell">tar -zcvf web.tar.gz /var/www/</code></pre></li><li><p>修改数据库密码</p><ul><li><p>已知自己数据库密码</p><ul><li>使用命令 mysql -u root -pxxxx 进入数据库</li><li>set password = password(‘123456’);</li></ul></li><li><p>不知自己数据库密码</p><ul><li><p>进入/etc/my.cnf，在 mysqld 下面增加一行 skip-grant-tables</p></li><li><p>保存完之后重启服务</p></li><li><p>直接输入 mysql -u root -p ，最后回车进入数据库</p></li><li><p>use mysql; 更改数据库 </p></li><li><p>UPDATE user SET PASSWORD =password(“mima”) WHERE USER = ‘root’; 重置密码 </p><p>flush privileges; 刷新系统权限相关表 4 删除配置文件中的内容，重启 Mysql 服务。</p></li></ul></li></ul></li><li><p>查看是否有弱口令，更改一切弱口令</p><ul><li>查看自己的系统中是否有主办方留下的后门账户。因为用户的 UID 大于 500 的都是非 系统账号，500 以下的都为系统保留的账号</li></ul><pre><code class="shell">more /etc/passwd</code></pre><ul><li>发现后门账户后 userdel xxxx命令删除它</li></ul></li><li><p>关闭不必要端口，如远程登陆端口</p><ul><li>关闭不必要的端口，要求的服务端口不能关</li></ul><pre><code class="shell">netstat -anp #查看端口被哪个进程占用</code></pre><pre><code class="shell">kill -9 PID #杀掉进程</code></pre><pre><code class="shell">Netstat- anp | more #查看当前开启了哪些端口</code></pre></li><li><p>修改ssh密码</p></li></ul><pre><code class="shell">sudo passwd (user)(current) UNIX password:New password：New password：</code></pre><ul><li><p>拿到源码后D盾查杀  seay代码审计</p><ul><li>seay代码工具审计<pre><code>    出漏洞，加进批量脚本    修漏洞，会修就修，不会修就注释 不搞蹦网站就行    查看后门账号    关闭不必要的端口(后面有命令)    保留22，80</code></pre></li></ul></li><li><p>文件监控防shell</p><ul><li>使用chattr+i命令(在有root或sudo的权限下)<pre><code>    #lisattr   查看文件隐藏属性    #chattr +i 1.txt    防止某个关键文件被修改 这样所以用户都不能对该文件或者目录进行修改删除的操作（包括root）    #chattr -i 1.txt 取消隐藏属性 进行修改时使用    #chattr -R +i /var/www/html 将/var/www/html目录下的文件设置为不允许任何人修改</code></pre></li></ul></li><li><p>挂waf</p><ul><li>将waf.php传到要包含的文件的目录<pre><code>在页面中加入防护，有两种做法，根据情况二选一：    PHPCMS V9：\phpcms\base.php    PHPWIND8.7：\data\sql_config.php    DEDECMS5.7：\data\common.inc.php    DiscuzX2：\config\config_global.php    Wordpress：\wp-config.php    Metinfo：\include\head.php    在所需要防护的页面加入代码：        require_once(&#39;waf.php&#39;);这样就可以做到页面防注入、跨站。        如果想整站防注，就在网站的一个公用文件中添加上述代码来调用WAF        常用的php的WAF添加路径：    在每个文件最前加上上述代码    在php.ini中找到并添加：            Automatically add files before or after any PHP document.        auto_prepend_file = waf.php的路径;简便的方法，用一条命令解决，以php为例：    sudo find /var/www/html/path_you_want -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?php\nrequire_once(&#39;\/tmp\/waf.php&#39;);\n/g&quot;    #意思就是查找需要加waf的目录下所有php文件，在头部添加一句，用require_once函数引入/tmp/waf.php文件。因为sed命令利用 / 区分文件中的原字符串和修改的字符串，所以我们要对 / 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义。</code></pre>部署waf可能会导致服务不可用，部署后要密切留意自己服务器的状态</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>AWD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全,AWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
